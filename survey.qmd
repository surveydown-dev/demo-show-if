---
server: shiny
filters: [surveydown]
---

```{r}
#| context: setup
#| echo: false
#| warning: false
#| message: false

# Run this in your R Console to install the latest version of the package:
# remotes::install_github("surveydown-dev/surveydown", force = TRUE)

# Run this to install or update the Quarto extension to the latest version:
# surveydown::sd_update_extension()

# Load the package
library(surveydown)

# Run initial setup function (essential - do not delete)
sd_setup()
```

::: {#basic_skipping .sd-page}

# Basic Skipping
 
If the "**Other**" option is chosen, a question asking the other penguin type will appear. 

This is done by using the `show_if` argument in `sd_config()`.

```{r}
sd_question(
  type  = 'mc',
  id    = 'penguins_basic',
  label = "Which is your favorite type of penguin?",
  option = c(
    'Adélie'    = 'adelie',
    'Chinstrap' = 'chinstrap',
    'Gentoo'    = 'gentoo',
    'Other'     = 'other'
  )
)

sd_question(
  type  = "text",
  id    = "penguins_other_basic",
  label = "Please specify the other penguin type:"
)
```

<br>

```{r}
sd_next(next_page = 'custom_skipping')
```

:::

::: {#custom_skipping .sd-page}

# Custom Skipping
 
Say that we want to have a more complicated condition. Now there are 2 questions. Only if the user chooses both "**Other**" and "**Show**" will the other penguin question appear. This is done by using the `show_if_custom` argument in `sd_config()`. We also made a custom function called `show_other()` to facilitate the logic (see the server code chunk).

```{r}
sd_question(
  type  = 'mc',
  id    = 'penguins_custom',
  label = "Which is your favorite type of penguin?",
  option = c(
    'Adélie'    = 'adelie',
    'Chinstrap' = 'chinstrap',
    'Gentoo'    = 'gentoo',
    'Other'     = 'other'
  )
)

sd_question(
  type  = 'mc',
  id    = 'show_other_custom',
  label = "Should we show the 'other' option question?",
  option = c(
    'Show' = 'show',
    'Hide' = 'hide'
  )
)

sd_question(
  type  = "text",
  id    = "penguins_other_custom",
  label = "Please specify the other penguin type:"
)
```

<br>

```{r}
sd_next(next_page = 'end')
```

:::

::: {#end .sd-page}

## This is the end of the demo survey showcasing the conditional display feature.

:::

```{r}
#| context: server

##################
# database setup #
##################

# surveydown stores data on a database that you define at https://supabase.com/
# To connect to a database to store the survey data, update this with details
# from your supabase account and database. For this demo, we set pause = TRUE
# which will ignore the other settings and won't attempt to connect to
# the database. See documentation for details at
# https://surveydown.org/store-data

db <- sd_database(
  host   = "",
  dbname = "",
  port   = "",
  user   = "",
  table  = "",
  pause  = TRUE
)

################
# config setup #
################

# Use the sd_config() function to customize features in your survey, like
# logic to conditionally display questions or skip to pages based on responses
# to skip other questions in your survey. See documentation for details at
# https://surveydown.org/config

# Custom function for show_if_custom()

show_other <- function(input) {
  return(input$penguins_custom == "other" & input$show_other_custom == "show")
}

# Configs including show_if() and show_if_custom() logic

config <- sd_config(
  show_if = tibble::tribble(
    ~question_id,     ~question_value, ~target,
    "penguins_basic", "other",         "penguins_other_basic"
  ),
  show_if_custom = list(
    list(condition = show_other, target = "penguins_other_custom")
  )
)

####################################
# Don't change anything below here #
####################################

# The sd_server function initiates your survey - don't change this

sd_server(
  input   = input,
  output  = output,
  session = session,
  config  = config,
  db      = db
)
```
